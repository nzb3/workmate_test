// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/task/create": {
            "post": {
                "description": "Creates a new task with the specified name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Create a new task",
                "parameters": [
                    {
                        "description": "Task info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/taskcontroller.CreateTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Task accepted for processing",
                        "schema": {
                            "$ref": "#/definitions/taskcontroller.TaskResponse"
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "Location of the created task"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/taskcontroller.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/taskcontroller.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/task/{id}": {
            "get": {
                "description": "Returns information about a task by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get task info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task found",
                        "schema": {
                            "$ref": "#/definitions/taskcontroller.TaskResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/taskcontroller.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "$ref": "#/definitions/taskcontroller.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a task by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Delete a task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Task deleted"
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/taskcontroller.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "$ref": "#/definitions/taskcontroller.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tasks": {
            "get": {
                "description": "Returns a list of all tasks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "List all tasks",
                "responses": {
                    "200": {
                        "description": "List of tasks",
                        "schema": {
                            "$ref": "#/definitions/taskcontroller.TaskListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/taskcontroller.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "taskcontroller.CreateTaskRequest": {
            "description": "Request payload for creating a task.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                }
            }
        },
        "taskcontroller.ErrorResponse": {
            "description": "Error response with error code and message.",
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "taskcontroller.TaskListResponse": {
            "description": "List of tasks.",
            "type": "object",
            "properties": {
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/taskcontroller.TaskResponse"
                    }
                }
            }
        },
        "taskcontroller.TaskResponse": {
            "description": "Task information including status and processing time.",
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "processing_time": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/taskmodel.TaskStatus"
                }
            }
        },
        "taskmodel.TaskStatus": {
            "type": "string",
            "enum": [
                "DONE",
                "PROCESSING",
                "FAILED"
            ],
            "x-enum-varnames": [
                "StatusDone",
                "StatusProcessing",
                "StatusFailed"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Workmate API",
	Description:      "API for task management",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
